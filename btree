#include <stdio.h>
#include <stdlib.h>


struct node {
    int key;
    struct node* left;
    struct node* right;
};


struct node* createNode(int item)
{
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->key = item;
    newNode->left = newNode->right = NULL;
    return newNode;
}


struct node* insertNode(struct node* root, int key)
{
    
    if (root == NULL)
        return createNode(key);

    
    if (key < root->key)
        root->left = insertNode(root->left, key);
    else if (key > root->key)
        root->right = insertNode(root->right, key);

    return root;
}


void inorderTraversal(struct node* root)
{
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->key);
        inorderTraversal(root->right);
    }
}

int main()
{
    struct node* root = NULL;
    root = insertNode(root, 50);
    insertNode(root, 30);
    insertNode(root, 20);
    insertNode(root, 40);
    insertNode(root, 70);
    insertNode(root, 60);
    insertNode(root, 80);

    printf("In-order traversal of the BST: ");
    inorderTraversal(root);

    return 0;
}
